name: Deploy Assistant to AWS

on:
  workflow_dispatch:  # Enables manual triggering via the GitHub Actions UI

jobs:
  deploy:
    runs-on: ubuntu-latest  # Runs the action on the latest Ubuntu runner

    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up AWS CLI
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Install .NET
      - name: Install .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'  # Use the version of .NET your Lambda is targeting

      # Step 4: Build the Lambda Function
      - name: Build Lambda Function
        run: |
          dotnet build -c Release

      # Step 5: Test the Lambda Function
      - name: Run Unit Tests
        run: |
          dotnet test --no-restore --verbosity normal
        continue-on-error: false  

      # Step 6: Publish the Lambda Function
      - name: Publish Lambda Function
        run: |
          dotnet publish ./quotifyai.Assistant/quotifyai.Assistant.csproj \
          -c Release \
          -o ./publish \
          -r linux-x64

      # Step 7: Package Lambda Function into a ZIP file
      - name: Package Lambda Function
        run: |
          cd ./publish
          zip -r9 ../function.zip ./*
          cd ..

      # Step 8: Deploy the Lambda Function
      - name: Deploy or Update Lambda Function
        run: |
          # Check if the function exists
          if aws lambda get-function --function-name quotifyai-assistant; then
            echo "Updating assistant..."
            aws lambda update-function-code \
              --function-name quotifyai-assistant \
              --zip-file fileb://function.zip
          else
            echo "Creating assistant..."
            aws lambda create-function \
              --function-name quotifyai-assistant \
              --runtime dotnet8 \
              --role ${{ secrets.LAMBDA_ROLE_ARN }} \
              --handler quotifyai.Assistant::quotifyai.Assistant.Function::FunctionHandler \
              --environment Variables="{EMAIL_USERNAME=${{ secrets.EMAIL_USERNAME }},EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }},EMAIL_SERVER=${{ secrets.EMAIL_SERVER }}}" \
              --zip-file fileb://function.zip
          fi

      # Step 9: Check if DynamoDB 'quotes' table exists
      - name: Initialize DynamoDB Table
        run: |
          # Check if the quotes table exists
          if ! aws dynamodb describe-table --table-name quotes; then
            echo "Table does not exist. Creating table..."
            # If table doesn't exist, create it
            aws dynamodb create-table \
              --table-name quotes \
              --attribute-definitions \
                  AttributeName=quoteId,AttributeType=S \
                  AttributeName=createdDate,AttributeType=S `
              --key-schema \
                  AttributeName=quoteId,KeyType=HASH \
                  AttributeName=createdDate,KeyType=RANGE \
              --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5
          else
            echo "Table already exists."
          fi       
